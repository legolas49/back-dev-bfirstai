#!/usr/bin/env node

/**
 * Script de v√©rification cross-platform pour d√©ploiement Linux
 * V√©rifie que l'application est pr√™te pour Docker/Kubernetes
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification compatibilit√© Linux/Docker...\n');

// 1. V√©rifier package.json
console.log('üì¶ V√©rification package.json:');
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Packages Windows-specific √† √©viter
  const windowsPackages = [
    '@rollup/rollup-win32-x64-msvc',
    'fsevents',
    '@esbuild/win32-x64'
  ];
  
  let hasWindowsPackages = false;
  ['dependencies', 'devDependencies'].forEach(depType => {
    if (packageJson[depType]) {
      windowsPackages.forEach(pkg => {
        if (packageJson[depType][pkg]) {
          console.log(`  ‚ùå ${pkg} trouv√© dans ${depType} (probl√©matique pour Linux)`);
          hasWindowsPackages = true;
        }
      });
    }
  });
  
  if (!hasWindowsPackages) {
    console.log('  ‚úÖ Aucun package Windows-specific d√©tect√©');
  }
} else {
  console.log('  ‚ùå package.json non trouv√©');
}

// 2. V√©rifier Dockerfile
console.log('\nüê≥ V√©rification Dockerfile:');
const dockerfilePath = path.join(process.cwd(), 'Dockerfile');
if (fs.existsSync(dockerfilePath)) {
  const dockerfileContent = fs.readFileSync(dockerfilePath, 'utf8');
  
  if (dockerfileContent.includes('node:18-alpine')) {
    console.log('  ‚úÖ Base image Alpine (recommand√©e)');
  } else if (dockerfileContent.includes('alpine')) {
    console.log('  ‚úÖ Image Alpine utilis√©e');
  } else {
    console.log('  ‚ö†Ô∏è  Image non-Alpine (consid√©rer node:18-alpine)');
  }
  
  if (dockerfileContent.includes('npm ci')) {
    console.log('  ‚úÖ npm ci utilis√© (builds reproductibles)');
  } else {
    console.log('  ‚ö†Ô∏è  npm install utilis√© (pr√©f√©rer npm ci)');
  }
} else {
  console.log('  ‚ùå Dockerfile non trouv√©');
}

// 3. V√©rifier .dockerignore
console.log('\nüö´ V√©rification .dockerignore:');
const dockerignorePath = path.join(process.cwd(), '.dockerignore');
if (fs.existsSync(dockerignorePath)) {
  const dockerignoreContent = fs.readFileSync(dockerignorePath, 'utf8');
  
  const essentialIgnores = ['node_modules', '.git', 'Dockerfile', '*.md'];
  let hasEssentials = true;
  
  essentialIgnores.forEach(ignore => {
    if (dockerignoreContent.includes(ignore)) {
      console.log(`  ‚úÖ ${ignore} ignor√©`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${ignore} non ignor√©`);
      hasEssentials = false;
    }
  });
  
  if (hasEssentials) {
    console.log('  ‚úÖ .dockerignore bien configur√©');
  }
} else {
  console.log('  ‚ùå .dockerignore non trouv√©');
}

// 4. V√©rifier la structure des chemins
console.log('\nüìÅ V√©rification chemins cross-platform:');
const srcPath = path.join(process.cwd(), 'src');
if (fs.existsSync(srcPath)) {
  console.log('  ‚úÖ R√©pertoire src/ trouv√©');
  
  // V√©rifier les imports TypeScript
  const findTsFiles = (dir) => {
    const files = [];
    const items = fs.readdirSync(dir);
    
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        files.push(...findTsFiles(fullPath));
      } else if (item.endsWith('.ts') || item.endsWith('.svelte')) {
        files.push(fullPath);
      }
    });
    
    return files;
  };
  
  const tsFiles = findTsFiles(srcPath);
  let hasWindowsPaths = false;
  
  tsFiles.slice(0, 5).forEach(file => { // V√©rifier les 5 premiers fichiers
    try {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('C:\\') || content.includes('\\\\')) {
        console.log(`  ‚ö†Ô∏è  Chemin Windows d√©tect√© dans ${path.relative(process.cwd(), file)}`);
        hasWindowsPaths = true;
      }
    } catch (e) {
      // Ignore les erreurs de lecture
    }
  });
  
  if (!hasWindowsPaths) {
    console.log('  ‚úÖ Aucun chemin Windows hardcod√© d√©tect√©');
  }
} else {
  console.log('  ‚ùå R√©pertoire src/ non trouv√©');
}

// 5. Recommandations finales
console.log('\nüöÄ Recommandations pour d√©ploiement:');
console.log('  ‚Ä¢ Utiliser npm ci au lieu de npm install');
console.log('  ‚Ä¢ Pr√©f√©rer les images Alpine pour Docker');
console.log('  ‚Ä¢ √âviter les packages natifs Windows');
console.log('  ‚Ä¢ Utiliser des chemins relatifs avec path.join()');
console.log('  ‚Ä¢ Tester le build dans un container Linux');

console.log('\n‚úÖ V√©rification termin√©e!');
